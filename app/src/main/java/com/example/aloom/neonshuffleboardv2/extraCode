package com.example.aloom.neonshuffleboardv2;


import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.os.Bundle;
import android.support.constraint.ConstraintLayout;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.DecelerateInterpolator;
import android.widget.ImageView;

//Intent is to produce a realistic simulation of a fling on the puck object for the Neon ShuffleBoard game
public class NSBGameActivity extends AppCompatActivity {
    private static final int ANIMATION_TIME = 240;
    private final String TAG = "PuckAnimatorActivity";
    //All physical state variables of the puck that track finger touch movement properties
    AnimatorSet animatePuckProperties;
    ConstraintLayout gameView;
    float flingDistance;
    float downXPOS;
    float downYPOS;
    float upXPOS;
    float upYPOS;
    float xVelocity;
    float yVelocity;
    float dx;
    float dy;
    ImageView puck;
    GestureDetector detector;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_nsbgame);
        puck = (ImageView) findViewById(R.id.puck);
        puck.setClickable(true);
        gameView = (ConstraintLayout)findViewById(R.id.nsbGame);
        detector = new GestureDetector(this, new CustomGestureListener());
        animatePuckPropertiesOnTouch();
    }
    public void calculateDistance(MotionEvent event){
        Log.d(TAG, "initial x pos: "+ downXPOS);
        Log.d(TAG, "initial y pos: "+ downYPOS);
        //change value of distance variable
        flingDistance = (float) Math.sqrt((dx*dx)+(dy*dy));
    }

    public void animatePuckPropertiesOnTouch(){
        puck.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent ev) {
                puck.setClickable(true);
                return detector.onTouchEvent(ev);
            }
        });
    }

    class CustomGestureListener implements GestureDetector.OnGestureListener{

        private static final int SWIPE_MIN_DISTANCE = 120;
        private static final int SWIPE_MAX_OFF_PATH = 250;
        private static final float SWIPE_THRESHOLD_VELOCITY = 200;

        @Override
        public boolean onDown(MotionEvent e) {
            return false;
        }

        @Override
        public void onShowPress(MotionEvent e) {

        }

        @Override
        public boolean onSingleTapUp(MotionEvent e) {
            return false;
        }

        @Override
        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
            return false;
        }

        @Override
        public void onLongPress(MotionEvent e) {

        }

        @Override
        public boolean onFling(MotionEvent fingerDown, MotionEvent move, float velocityX, float velocityY) {
            Log.i(TAG, "____FLING INITIATED____");
            //animatePuck();
            downXPOS = fingerDown.getX();
            Log.d(TAG, "XPOS finger down:  "+downXPOS);
            downYPOS = fingerDown.getY();
            Log.d(TAG, "YPOS finger down:  "+downYPOS);
            upXPOS = move.getX();
            Log.d(TAG, "End X POS:  "+upXPOS);
            upYPOS = move.getY();
            Log.d(TAG, "End Y POS:  "+upYPOS);
            dx = (upXPOS-downXPOS);
            dy = (upYPOS-downYPOS);
            Log.d(TAG, "End Y POS:  "+upYPOS);
            xVelocity = (float) (velocityX*.00025);
            Log.d(TAG, "Velocity X:  "+velocityX);
            yVelocity = (float) (velocityY*.00025);
            Log.d(TAG, "Velocity Y:  "+velocityY);
            calculateDistance(move);
            animatePuck();
            return true;
        }
        public void animatePuck(){
            int SCREEN_LEFT_BOUNDS = gameView.getLeft();
            int SCREEN_RIGHT_BOUNDS = gameView.getRight();
            int SCREEN_BOTTOM_BOUNDS = gameView.getBottom();
            Log.d(TAG, "SCREEN_BOTTOM_BOUNDS:  "+SCREEN_BOTTOM_BOUNDS);
            int SCREEN_TOP_BOUNDS = gameView.getTop();
            Log.d(TAG, "SCREEN_TOP_BOUNDS:  "+SCREEN_TOP_BOUNDS);
            int puckSpeed = 40000;
            puck.setAdjustViewBounds(true);
            int PUCK_TOP = puck.getTop();
            Log.d(TAG, "PUCK_TOP:  "+PUCK_TOP);
            int PUCK_BOTTOM  = puck.getBottom();
            Log.d(TAG, "PUCK_BOTTOM:  "+PUCK_BOTTOM);
            int[]puckXYLocation = new int[2];
            puck.getLocationOnScreen(puckXYLocation);
            int puckXPOS = puckXYLocation[0];
            Log.d(TAG, "puck x pos:  "+puckXPOS);
            int puckYPOS = puckXYLocation[1];
            Log.d(TAG, "puck y pos:  "+puckYPOS);
            int bottomBoundary  = SCREEN_BOTTOM_BOUNDS-PUCK_BOTTOM;
            Log.d(TAG, "bottomBoundary:  "+bottomBoundary);
            int topBoundary =  SCREEN_TOP_BOUNDS + PUCK_TOP;
            Log.d(TAG, "topBoundary:  "+topBoundary);
            Log.d(TAG, "initial bottom boundary:  "+bottomBoundary);

            if( bottomBoundary < puckYPOS){//double check logic
                ObjectAnimator animY = ObjectAnimator.ofFloat(puck, View.TRANSLATION_Y, flingDistance*yVelocity);
                ObjectAnimator animX = ObjectAnimator.ofFloat(puck,View.TRANSLATION_X, flingDistance*xVelocity);
                ObjectAnimator animZ = ObjectAnimator.ofFloat(puck,"z",flingDistance);
                animatePuckProperties = new AnimatorSet();
                animatePuckProperties.setInterpolator(new DecelerateInterpolator(18));
                animatePuckProperties.setStartDelay(0);
                animatePuckProperties.playTogether(animY,animX);
                animatePuckProperties.setDuration(puckSpeed);
                animatePuckProperties.start();

            }

        }
    }

}


float puckY;
float puckX;



    puckY = (puckCycleList[puckClock].getTop() + puckCycleList[puckClock].getBottom()) / 2;
            puckX = (puckCycleList[puckClock].getLeft() + puckCycleList[puckClock].getRight()) / 2;